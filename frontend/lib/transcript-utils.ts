import type { ReceivedChatMessage } from '@livekit/components-react';

export interface TranscriptMetadata {
  date: Date;
  sessionStart: Date;
  sessionEnd: Date;
  messageCount: number;
}

/**
 * Formats a timestamp as a readable time string (HH:MM:SS AM/PM)
 */
function formatTime(timestamp: number, locale: string = 'en-US'): string {
  return new Date(timestamp).toLocaleTimeString(locale, {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
  });
}

/**
 * Formats a date as a readable date string
 */
function formatDate(date: Date, locale: string = 'en-US'): string {
  return date.toLocaleDateString(locale, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

/**
 * Calculates session duration in minutes
 */
function calculateDuration(start: Date, end: Date): string {
  const durationMs = end.getTime() - start.getTime();
  const minutes = Math.floor(durationMs / 60000);
  const seconds = Math.floor((durationMs % 60000) / 1000);

  if (minutes === 0) {
    return `${seconds} second${seconds !== 1 ? 's' : ''}`;
  } else if (seconds === 0) {
    return `${minutes} minute${minutes !== 1 ? 's' : ''}`;
  } else {
    return `${minutes} minute${minutes !== 1 ? 's' : ''}, ${seconds} second${seconds !== 1 ? 's' : ''}`;
  }
}

/**
 * Determines the speaker label for a message
 */
function getSpeakerLabel(message: ReceivedChatMessage): string {
  return message.from?.isLocal ? 'You' : 'SAGE';
}

/**
 * Generates a filename for the transcript
 */
export function generateTranscriptFilename(date: Date = new Date()): string {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');

  return `SAGE-Transcript-${year}-${month}-${day}-${hours}${minutes}.md`;
}

/**
 * Formats messages into a Markdown transcript
 */
export function formatTranscriptAsMarkdown(
  messages: ReceivedChatMessage[],
  locale: string = 'en-US'
): string {
  if (messages.length === 0) {
    return '# SAGE Conversation Transcript\n\nNo messages recorded.\n';
  }

  const now = new Date();
  const sessionStart = new Date(messages[0].timestamp);
  const sessionEnd = new Date(messages[messages.length - 1].timestamp);
  const duration = calculateDuration(sessionStart, sessionEnd);

  // Header section
  const header = [
    '# SAGE Conversation Transcript',
    '',
    `**Date:** ${formatDate(sessionStart, locale)}`,
    `**Session Start:** ${formatTime(messages[0].timestamp, locale)}`,
    `**Session End:** ${formatTime(messages[messages.length - 1].timestamp, locale)}`,
    `**Duration:** ${duration}`,
    `**Messages:** ${messages.length}`,
    '',
    '---',
    '',
    '## Conversation',
    '',
  ].join('\n');

  // Messages section
  const messagesSection = messages
    .map((msg) => {
      const time = formatTime(msg.timestamp, locale);
      const speaker = getSpeakerLabel(msg);
      const message = msg.message.trim();

      return `**[${time}] ${speaker}:**\n${message}`;
    })
    .join('\n\n');

  // Footer section
  const footer = [
    '',
    '---',
    '',
    '*Transcript generated by SAGE - Your AI Companion*',
    `*Downloaded: ${formatDate(now, locale)} at ${formatTime(now.getTime(), locale)}*`,
  ].join('\n');

  return `${header}${messagesSection}${footer}`;
}

/**
 * Creates a downloadable blob from the transcript content
 */
export function createTranscriptBlob(content: string): Blob {
  return new Blob([content], { type: 'text/markdown;charset=utf-8' });
}
